{{#each schema.properties.isEnum}}
enum {{ toPascalCase ../schema.boundedContextName }}{{ toPascalCase ../schema.moduleName }}{{ toPascalCase name }} {
    {{#each enumOptions}}
    {{ . }}
    {{/each}}
}
{{/each}}

type {{ schema.aggregateName }}
{
    {{#each schema.properties.graphqlType}}
    {{#if (allowProperty ../schema.moduleName this)}}
    {{#eq relationship ../relationship.MANY_TO_ONE}}
    {{ toCamelCase nativeName }}: ID{{#unless nullable }}!{{/unless}}
    {{/eq}}
    {{#eq relationship ../relationship.ONE_TO_ONE }}
    {{#eq type ../sqlType.ID }}
    {{ toCamelCase nativeName }}: ID{{#unless nullable }}!{{/unless}}
    {{/eq}}
    {{/eq}}
    {{ toCamelCase nameGraphqlType }}: {{#eq type ../sqlType.ENUM}}{{ toPascalCase ../schema.boundedContextName }}{{ toPascalCase ../schema.moduleName }}{{ toPascalCase name }}{{else}}{{ getGraphqlType }}{{/eq}}{{#unless isRelationship }}{{#unless nullable }}!{{/unless}}{{/unless}}
    {{/if}}
    {{/each}}
}

input {{ toPascalCase schema.boundedContextName }}Create{{ toPascalCase schema.moduleName }}Input
{
    {{#each schema.properties.graphqlInput}}
    {{#if (allowProperty ../schema.moduleName this)}}
    {{ toCamelCase name }}: {{#eq type ../sqlType.ENUM}}{{ toPascalCase ../schema.boundedContextName }}{{ toPascalCase ../schema.moduleName }}{{ toPascalCase name }}{{else}}{{ getGraphqlCreateType }}{{/eq}}{{#unless nullable }}!{{/unless}}
    {{/if}}
    {{/each}}
}

input {{ toPascalCase schema.boundedContextName }}Update{{ toPascalCase schema.moduleName }}Input
{
    {{#each schema.properties.graphqlInput}}
    {{#if (allowProperty ../schema.moduleName this)}}
    {{ toCamelCase name }}: {{#eq type ../sqlType.ENUM}}{{ toPascalCase ../schema.boundedContextName }}{{ toPascalCase ../schema.moduleName }}{{ toPascalCase name }}{{else}}{{ getGraphqlUpdateType }}{{/eq}}{{#eq name 'id'}}!{{/eq}}
    {{/if}}
    {{/each}}
}

type Query
{
    {{ toCamelCase schema.boundedContextName }}Find{{ toPascalCase schema.moduleName }}(query: QueryStatement constraint: QueryStatement): {{ schema.aggregateName }}
    {{ toCamelCase schema.boundedContextName }}Find{{ toPascalCase schema.moduleName }}ById(id: ID constraint: QueryStatement): {{ schema.aggregateName }}
    {{ toCamelCase schema.boundedContextName }}Get{{ toPascalCase schema.moduleNames }}(query: QueryStatement constraint: QueryStatement): [{{ schema.aggregateName }}]!
    {{ toCamelCase schema.boundedContextName }}Paginate{{ toPascalCase schema.moduleNames }}(query: QueryStatement constraint: QueryStatement): Pagination!
}

type Mutation
{
    {{ toCamelCase schema.boundedContextName }}Create{{ toPascalCase schema.moduleName }}(payload: {{ toPascalCase schema.boundedContextName }}Create{{ toPascalCase schema.moduleName }}Input!): {{ schema.aggregateName }}
    {{ toCamelCase schema.boundedContextName }}Create{{ toPascalCase schema.moduleNames }}(payload: [{{ toPascalCase schema.boundedContextName }}Create{{ toPascalCase schema.moduleName }}Input]!): Boolean!
    {{ toCamelCase schema.boundedContextName }}Update{{ toPascalCase schema.moduleName }}(payload: {{ toPascalCase schema.boundedContextName }}Update{{ toPascalCase schema.moduleName }}Input! constraint: QueryStatement): {{ schema.aggregateName }}
    {{ toCamelCase schema.boundedContextName }}Delete{{ toPascalCase schema.moduleName }}ById(id: ID! constraint: QueryStatement): {{ schema.aggregateName }}
    {{ toCamelCase schema.boundedContextName }}Delete{{ toPascalCase schema.moduleNames }}(query: QueryStatement constraint: QueryStatement): [{{ schema.aggregateName }}]!
}