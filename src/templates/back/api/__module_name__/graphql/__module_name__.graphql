{{#each schema.properties.isEnum}}
enum {{ toPascalCase ../schema.boundedContextName }}{{ toPascalCase ../schema.moduleName }}{{ toPascalCase originName }} {
    {{#each enumOptions}}
    {{ . }}
    {{/each}}
}
{{/each}}

type {{ schema.aggregateName }}
{
{{#each schema.properties.graphqlProperties}}
{{#if (allowProperty ../schema.moduleName this) }}
{{setVar 'isCommonProperty' true ~}}
{{#eq relationship ../relationship.MANY_TO_ONE}}
    {{setVar 'isCommonProperty' false ~}}
    {{ toCamelCase originName }}: ID{{#unless nullable }}!{{/unless}}
    {{ toCamelCase relationshipField }}: {{ relationshipAggregate }}
{{/eq}}
{{#eq relationship ../relationship.MANY_TO_MANY}}
    {{setVar 'isCommonProperty' false ~}}
    {{ toCamelCase originName }}: [{{ toPascalCase getRelationshipBoundedContext }}{{ toPascalCase getRelationshipModule }}]{{#unless nullable }}!{{/unless}}
{{/eq}}
{{#eq relationship ../relationship.ONE_TO_MANY}}
    {{setVar 'isCommonProperty' false ~}}
    {{ toCamelCase originName }}: [{{ toPascalCase getRelationshipBoundedContext }}{{ toPascalCase getRelationshipModule }}]{{#unless nullable }}!{{/unless}}
{{/eq}}
{{#eq relationship ../relationship.ONE_TO_ONE }}
    {{setVar 'isCommonProperty' false ~}}
{{#eq type ../sqlType.ID ~}}
    {{ toCamelCase originName }}: ID{{#unless nullable }}!{{/unless}}
    {{ toCamelCase relationshipField }}: {{ relationshipAggregate }}
{{else ~}}
    {{ toCamelCase originName }}: {{ relationshipAggregate }}{{#unless nullable }}!{{/unless}}
{{/eq}}
{{/eq}}
{{#eq type ../sqlType.ENUM}}
    {{setVar 'isCommonProperty' false ~}}
    {{ toCamelCase originName }}: {{ toPascalCase ../schema.boundedContextName }}{{ toPascalCase ../schema.moduleName }}{{ toPascalCase originName }}{{#unless nullable }}!{{/unless}}
{{/eq}}
{{#if ../isCommonProperty}}
    {{ toCamelCase originName }}: {{ getGraphqlType }}{{#unless nullable }}!{{/unless}}
{{/if}}
{{/if}}
{{/each}}
}

input {{ toPascalCase schema.boundedContextName }}Create{{ toPascalCase schema.moduleName }}Input
{
{{#each schema.properties.graphqlInputProperties}}
{{#if (allowProperty ../schema.moduleName this)}}
{{setVar 'isCommonProperty' true ~}}
{{#eq relationship ../relationship.MANY_TO_ONE}}
    {{setVar 'isCommonProperty' false ~}}
    {{ toCamelCase originName }}: ID{{#unless nullable }}!{{/unless}}
{{/eq}}
{{#eq relationship ../relationship.MANY_TO_MANY}}
    {{setVar 'isCommonProperty' false ~}}
    {{ toCamelCase relationshipSingularName }}Ids: [ID]{{#unless nullable }}!{{/unless}}
{{/eq}}
{{#eq relationship ../relationship.ONE_TO_MANY}}{{setVar 'isCommonProperty' false ~}}{{/eq ~}}
{{#eq relationship ../relationship.ONE_TO_ONE }}
    {{setVar 'isCommonProperty' false ~}}
{{#eq type ../sqlType.ID ~}}
    {{ toCamelCase originName }}: ID{{#unless nullable }}!{{/unless}}
{{else ~}}
    {{ toCamelCase originName }}: {{ toPascalCase getRelationshipBoundedContext }}Create{{ toPascalCase getRelationshipModule }}Input{{#unless nullable }}!{{/unless}}
{{/eq}}
{{/eq}}
{{#eq type ../sqlType.ENUM}}
    {{setVar 'isCommonProperty' false ~}}
    {{ toCamelCase originName }}: {{ toPascalCase ../schema.boundedContextName }}{{ toPascalCase ../schema.moduleName }}{{ toPascalCase originName }}{{#unless nullable }}!{{/unless}}
{{/eq}}
{{#if ../isCommonProperty}}
    {{ toCamelCase originName }}: {{ getGraphqlType }}{{#unless nullable }}!{{/unless}}
{{/if}}
{{/if}}
{{/each}}
}

input {{ toPascalCase schema.boundedContextName }}Update{{ toPascalCase schema.moduleName }}ByIdInput
{
{{#each schema.properties.graphqlInputProperties}}
{{#if (allowProperty ../schema.moduleName this)}}
{{setVar 'isCommonProperty' true ~}}
{{#eq relationship ../relationship.MANY_TO_ONE}}
    {{setVar 'isCommonProperty' false ~}}
    {{ toCamelCase originName }}: ID
{{/eq}}
{{#eq relationship ../relationship.MANY_TO_MANY}}
    {{setVar 'isCommonProperty' false ~}}
    {{ toCamelCase relationshipSingularName }}Ids: [ID]
{{/eq}}
{{#eq relationship ../relationship.ONE_TO_MANY}}{{setVar 'isCommonProperty' false ~}}{{/eq ~}}
{{#eq relationship ../relationship.ONE_TO_ONE }}
    {{setVar 'isCommonProperty' false ~}}
{{#eq type ../sqlType.ID ~}}
    {{ toCamelCase originName }}: ID
{{else ~}}
    {{ toCamelCase originName }}: {{ toPascalCase getRelationshipBoundedContext }}Update{{ toPascalCase getRelationshipModule }}Input
{{/eq}}
{{/eq}}
{{#eq type ../sqlType.ENUM}}
    {{setVar 'isCommonProperty' false ~}}
    {{ toCamelCase originName }}: {{ toPascalCase ../schema.boundedContextName }}{{ toPascalCase ../schema.moduleName }}{{ toPascalCase originName }}
{{/eq}}
{{#if ../isCommonProperty}}
    {{ toCamelCase originName }}: {{ getGraphqlType }}{{#eq originName 'id'}}!{{/eq}}
{{/if}}
{{/if}}
{{/each}}
}

input {{ toPascalCase schema.boundedContextName }}Update{{ toPascalCase schema.moduleNames }}Input
{
{{#each schema.properties.graphqlInputProperties}}
{{#if (allowProperty ../schema.moduleName this)}}
{{setVar 'isCommonProperty' true ~}}
{{#eq relationship ../relationship.MANY_TO_ONE}}
    {{setVar 'isCommonProperty' false ~}}
    {{ toCamelCase originName }}: ID
{{/eq}}
{{#eq relationship ../relationship.MANY_TO_MANY}}
    {{setVar 'isCommonProperty' false ~}}
    {{ toCamelCase relationshipSingularName }}Ids: [ID]
{{/eq}}
{{#eq relationship ../relationship.ONE_TO_MANY}}{{setVar 'isCommonProperty' false ~}}{{/eq ~}}
{{#eq relationship ../relationship.ONE_TO_ONE }}
    {{setVar 'isCommonProperty' false ~}}
{{#eq type ../sqlType.ID ~}}
    {{ toCamelCase originName }}: ID
{{else ~}}
    {{ toCamelCase originName }}: {{ toPascalCase getRelationshipBoundedContext }}Update{{ toPascalCase getRelationshipModule }}Input
{{/eq}}
{{/eq}}
{{#eq type ../sqlType.ENUM}}
    {{setVar 'isCommonProperty' false ~}}
    {{ toCamelCase originName }}: {{ toPascalCase ../schema.boundedContextName }}{{ toPascalCase ../schema.moduleName }}{{ toPascalCase originName }}
{{/eq}}
{{#if ../isCommonProperty}}
    {{ toCamelCase originName }}: {{ getGraphqlType }}
{{/if}}
{{/if}}
{{/each}}
}

type Query
{
    {{ toCamelCase schema.boundedContextName }}Find{{ toPascalCase schema.moduleName }}(query: QueryStatement constraint: QueryStatement): {{ schema.aggregateName }}
    {{ toCamelCase schema.boundedContextName }}Find{{ toPascalCase schema.moduleName }}ById(id: ID constraint: QueryStatement): {{ schema.aggregateName }}
    {{ toCamelCase schema.boundedContextName }}Get{{ toPascalCase schema.moduleNames }}(query: QueryStatement constraint: QueryStatement): [{{ schema.aggregateName }}]!
    {{ toCamelCase schema.boundedContextName }}Paginate{{ toPascalCase schema.moduleNames }}(query: QueryStatement constraint: QueryStatement): Pagination!
}

type Mutation
{
    {{ toCamelCase schema.boundedContextName }}Create{{ toPascalCase schema.moduleName }}(payload: {{ toPascalCase schema.boundedContextName }}Create{{ toPascalCase schema.moduleName }}Input!): {{ schema.aggregateName }}
    {{ toCamelCase schema.boundedContextName }}Create{{ toPascalCase schema.moduleNames }}(payload: [{{ toPascalCase schema.boundedContextName }}Create{{ toPascalCase schema.moduleName }}Input]!): Boolean!
    {{ toCamelCase schema.boundedContextName }}Update{{ toPascalCase schema.moduleName }}ById(payload: {{ toPascalCase schema.boundedContextName }}Update{{ toPascalCase schema.moduleName }}ByIdInput! constraint: QueryStatement): {{ schema.aggregateName }}
    {{ toCamelCase schema.boundedContextName }}Update{{ toPascalCase schema.moduleNames }}(payload: {{ toPascalCase schema.boundedContextName }}Update{{ toPascalCase schema.moduleNames }}Input! query: QueryStatement constraint: QueryStatement): [{{ schema.aggregateName }}]!
    {{ toCamelCase schema.boundedContextName }}Delete{{ toPascalCase schema.moduleName }}ById(id: ID! constraint: QueryStatement): {{ schema.aggregateName }}
    {{ toCamelCase schema.boundedContextName }}Delete{{ toPascalCase schema.moduleNames }}(query: QueryStatement constraint: QueryStatement): [{{ schema.aggregateName }}]!
}