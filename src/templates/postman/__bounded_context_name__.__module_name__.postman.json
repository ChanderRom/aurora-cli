{
    "info": {
		"_postman_id"   : "{{ uuid }}",
		"name"          : "{{ config.applicationsContainer }} - {{ toKebabCase schema.boundedContextName }}/{{ toKebabCase schema.moduleName }}",
		"schema"        : "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
			"name": "GraphQL - {{ toCamelCase schema.boundedContextName }}Create{{ toPascalCase schema.moduleName }}",
			"request": {
				"method": "POST",
				"header": [
                    {{#if schema.properties.hasI18n}}
                    {
                        "key": "Content-Language",
                        "name": "Content-Language",
                        "type": "text",
                        "value": "es"
                    }
                    {{/if}}
                ],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ($payload:{{ toPascalCase schema.boundedContextName }}Create{{ toPascalCase schema.moduleName }}Input!)\n{\n\t{{ toCamelCase schema.boundedContextName }}Create{{ toPascalCase schema.moduleName }} (payload:$payload)\n\t{{ bracketOpen }}{{#each schema.properties.postmanGraphQLCreateQuery}}\n\t\t{{ toCamelCase name }}{{/each}}\n\t}\n}",
                        "variables": "{\n\t\"payload\":\n\t{{ bracketOpen }}{{#each schema.properties.postmanGraphQLCreateVariables}}\n\t\t\"{{ toCamelCase name }}\": {{{ postmanQuotes . }}}{{{ mocker (object property=. type='postman') }}}{{{ postmanQuotes . }}}{{#unless @last}}, {{/unless}}{{/each}}\n\t}\n}"
					}
				},
				"url": {
					"raw": "\{{URL}}/graphql",
					"host": [
						"\{{URL}}"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
        },
        {
			"name": "GraphQL - {{ toCamelCase schema.boundedContextName }}Create{{ toPascalCase schema.moduleNames }}",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ($payload:[{{ toPascalCase schema.boundedContextName }}Create{{ toPascalCase schema.moduleName }}Input]!)\n{\n\t{{ toCamelCase schema.boundedContextName }}Create{{ toPascalCase schema.moduleNames }} (payload:$payload)\n}",
						"variables": "{\n\t\"payload\":\n\t[{{#loops 10}}\n\t\t{{ bracketOpen }}{{#each ../schema.properties.postmanGraphQLCreateVariables}}\n\t\t\t\"{{ toCamelCase name }}\": {{{ postmanQuotes . }}}{{{ mocker (object property=. type='postman' hasUuidSeed=false) }}}{{{ postmanQuotes . }}}{{#unless @last}}, {{/unless}}{{/each}}\n\t\t}{{#unless @last}}, {{/unless}}{{/loops}}\n\t]\n}"
					}
				},
				"url": {
					"raw": "\{{URL}}/graphql",
					"host": [
						"\{{URL}}"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
        },
        {
			"name": "GraphQL - {{ toCamelCase schema.boundedContextName }}Paginate{{ toPascalCase schema.moduleNames }}",
			"request": {
				"method": "POST",
				"header": [
                    {{#if schema.properties.hasI18n}}
                    {
                        "key": "Content-Language",
                        "name": "Content-Language",
                        "type": "text",
                        "value": "es"
                    }
                    {{/if}}
                ],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ($query:QueryStatement $constraint:QueryStatement)\n{\n\t{{ toCamelCase schema.boundedContextName }}Paginate{{ toPascalCase schema.moduleNames }} (query:$query constraint:$constraint)\n\t{\n\t\ttotal\n\t\tcount\n\t\trows\n\t}\n}",
						"variables": "{\n\t\"query\":\n\t{\n\t\t\"offset\": 0,\n\t\t\"limit\": 10\n\t}\n}"
					}
				},
				"url": {
					"raw": "\{{URL}}/graphql",
					"host": [
						"\{{URL}}"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
        },
        {
			"name": "GraphQL - {{ toCamelCase schema.boundedContextName }}Get{{ toPascalCase schema.moduleNames }}",
			"request": {
				"method": "POST",
				"header": [
                    {{#if schema.properties.hasI18n}}
                    {
                        "key": "Content-Language",
                        "name": "Content-Language",
                        "type": "text",
                        "value": "es"
                    }
                    {{/if}}
                ],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ($query:QueryStatement)\n{\n\t{{ toCamelCase schema.boundedContextName }}Get{{ toPascalCase schema.moduleNames }} (query: $query)\n\t{{ bracketOpen }}{{#each schema.properties.postmanGraphQLGetQuery}}\n\t\t{{ toCamelCase name }}{{/each}}\n\t}\n}",
						"variables": "{\n\t\"query\":\n\t{\n\t\t\"where\":\n\t\t{ \n\t\t\t\"id\": \"{{{ mocker (object type='uuid') }}}\"\n\t\t}\n\t}\n}"
					}
				},
				"url": {
					"raw": "\{{URL}}/graphql",
					"host": [
						"\{{URL}}"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
        },
        {
			"name": "GraphQL - {{ toCamelCase schema.boundedContextName }}Find{{ toPascalCase schema.moduleName }}",
			"request": {
				"method": "POST",
				"header": [
                    {{#if schema.properties.hasI18n}}
                    {
                        "key": "Content-Language",
                        "name": "Content-Language",
                        "type": "text",
                        "value": "es"
                    }
                    {{/if}}
                ],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ($query:QueryStatement)\n{\n\t{{ toCamelCase schema.boundedContextName }}Find{{ toPascalCase schema.moduleName }} (query: $query)\n\t{{ bracketOpen }}{{#each schema.properties.postmanGraphQLFindQuery}}\n\t\t{{ toCamelCase name }}{{/each}}\n\t}\n}",
						"variables": "{\n\t\"query\":\n\t{\n\t\t\"where\":\n\t\t{\n\t\t\t\"id\": \"{{{ mocker (object type='uuid') }}}\"\n\t\t}\n\t}\n}"
					}
				},
				"url": {
					"raw": "\{{URL}}/graphql",
					"host": [
						"\{{URL}}"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
        },
        {
			"name": "GraphQL - {{ toCamelCase schema.boundedContextName }}Find{{ toPascalCase schema.moduleName }}ById",
			"request": {
				"method": "POST",
				"header": [
                    {{#if schema.properties.hasI18n}}
                    {
                        "key": "Content-Language",
                        "name": "Content-Language",
                        "type": "text",
                        "value": "es"
                    }
                    {{/if}}
                ],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ($id:ID)\n{\n\t{{ toCamelCase schema.boundedContextName }}Find{{ toPascalCase schema.moduleName }}ById (id:$id)\n\t{{ bracketOpen }}{{#each schema.properties.postmanGraphQLFindByIdQuery}}\n\t\t{{ toCamelCase name }}{{/each}}\n\t}\n}",
						"variables": "{\n\t\"id\": \"{{{ mocker (object type='uuid') }}}\"\n}"
					}
				},
				"url": {
					"raw": "\{{URL}}/graphql",
					"host": [
						"\{{URL}}"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
        },
        {{#if schema.properties.hasI18n}}
        {
			"name": "GraphQL - {{ toCamelCase schema.boundedContextName }}Find{{ toPascalCase schema.moduleName }}ByIdI18N",
			"request": {
				"method": "POST",
				"header": [
                    {
						"key": "Content-Language",
						"name": "Content-Language",
						"type": "text",
						"value": "es"
					}
                ],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ($id:ID)\n{\n\t{{ toCamelCase schema.boundedContextName }}Find{{ toPascalCase schema.moduleName }}ById (id:$id)\n\t{{ bracketOpen }}{{#each schema.properties.postmanGraphQLFindByIdQuery}}\n\t\t{{ toCamelCase name }}{{/each}}\n\t}\n}",
						"variables": "{\n\t\"id\": \"{{{ mocker (object type='uuid') }}}\"\n}"
					}
				},
				"url": {
					"raw": "\{{URL}}/graphql",
					"host": [
						"\{{URL}}"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
        },
        {{/if}}
        {
			"name": "GraphQL - {{ toCamelCase schema.boundedContextName }}Update{{ toPascalCase schema.moduleName }}",
			"request": {
				"method": "POST",
				"header": [
                    {{#if schema.properties.hasI18n}}
                    {
                        "key": "Content-Language",
                        "name": "Content-Language",
                        "type": "text",
                        "value": "es"
                    }
                    {{/if}}
                ],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ($payload:{{ toPascalCase schema.boundedContextName }}Update{{ toPascalCase schema.moduleName }}Input!)\n{\n\t{{ toCamelCase schema.boundedContextName }}Update{{ toPascalCase schema.moduleName }} (payload:$payload)\n\t{{ bracketOpen }}{{#each schema.properties.postmanGraphQLUpdateQuery}}\n\t\t{{ toCamelCase name }}{{/each}}\n\t}\n}",
						"variables": "{\n\t\"payload\":\n\t{{ bracketOpen }}{{#each schema.properties.postmanGraphQLUpdateVariables}}\n\t\t\"{{ toCamelCase name }}\": {{{ postmanQuotes . }}}{{{ mocker (object property=. type='postman') }}}{{{ postmanQuotes . }}}{{#unless @last}}, {{/unless}}{{/each}}\n\t}\n}"
					}
				},
				"url": {
					"raw": "\{{URL}}/graphql",
					"host": [
						"\{{URL}}"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
        },
        {
			"name": "GraphQL - {{ toCamelCase schema.boundedContextName }}Delete{{ toPascalCase schema.moduleName }}ById",
			"request": {
				"method": "POST",
				"header": [
                    {{#if schema.properties.hasI18n}}
                    {
                        "key": "Content-Language",
                        "name": "Content-Language",
                        "type": "text",
                        "value": "es"
                    }
                    {{/if}}
                ],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ($id:ID!)\n{\n\t{{ toCamelCase schema.boundedContextName }}Delete{{ toPascalCase schema.moduleName }}ById (id:$id)\n\t{{ bracketOpen }}{{#each schema.properties.postmanGraphQLDeleteQuery}}\n\t\t{{ toCamelCase name }}{{/each}}\n\t}\n}",
						"variables": "{\n\t\"id\": \"{{{ mocker (object type='uuid') }}}\"\n}"
					}
				},
				"url": {
					"raw": "\{{URL}}/graphql",
					"host": [
						"\{{URL}}"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
        },
        {
			"name": "GraphQL - {{ toCamelCase schema.boundedContextName }}Delete{{ toPascalCase schema.moduleNames }}",
			"request": {
				"method": "POST",
				"header": [
                    {{#if schema.properties.hasI18n}}
                    {
                        "key": "Content-Language",
                        "name": "Content-Language",
                        "type": "text",
                        "value": "es"
                    }
                    {{/if}}
                ],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ($query:QueryStatement)\n{\n\t{{ toCamelCase schema.boundedContextName }}Delete{{ toPascalCase schema.moduleNames }} (query: $query)\n\t{{ bracketOpen }}{{#each schema.properties.postmanGraphQLDeleteQuery}}\n\t\t{{ toCamelCase name }}{{/each}}\n\t}\n}",
						"variables": "{\n\t\"query\":\n\t{\n\t\t\"where\":\n\t\t{\n\t\t\t\"id\":\n\t\t\t{\n\t\t\t\t\"[substring]\": \"\"\n\t\t\t}\n\t\t}\n\t}\n}"
					}
				},
				"url": {
					"raw": "\{{URL}}/graphql",
					"host": [
						"\{{URL}}"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
        },
        {
			"name": "REST - {{ toKebabCase schema.boundedContextName }}/{{ toKebabCase schema.moduleName }}",
			"request": {
				"method": "POST",
				"header": [
					{
						"key"   : "Content-Type",
						"name"  : "Content-Type",
						"type"  : "text",
						"value" : "application/json"
					}{{#if schema.properties.hasI18n}},
                    {
                        "key": "Content-Language",
                        "name": "Content-Language",
                        "type": "text",
                        "value": "es"
                    }
                    {{/if}}
				],
				"body": {
					"mode"  : "raw",
					"raw"   : "{{ bracketOpen }}{{#each schema.properties.postmanRestCreate}}\n\t\"{{ toCamelCase name }}\": {{{ postmanQuotes . }}}{{{ mocker (object property=. type='postman') }}}{{{ postmanQuotes . }}}{{#unless @last}}, {{/unless}}{{/each}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "\{{URL}}/{{ toKebabCase schema.boundedContextName }}/{{ toKebabCase schema.moduleName }}",
					"host": [
						"\{{URL}}"
					],
					"path": [
						"{{ toKebabCase schema.boundedContextName }}",
						"{{ toKebabCase schema.moduleName }}"
					]
				}
			},
			"response": []
        },
        {
			"name": "REST - {{ toKebabCase schema.boundedContextName }}/{{ toKebabCase schema.moduleNames }}",
			"request": {
				"method": "POST",
				"header": [
					{
						"key"   : "Content-Type",
						"name"  : "Content-Type",
						"type"  : "text",
						"value" : "application/json"
					}{{#if schema.properties.hasI18n}},
                    {
                        "key": "Content-Language",
                        "name": "Content-Language",
                        "type": "text",
                        "value": "es"
                    }
                    {{/if}}
				],
				"body": {
					"mode"  : "raw",
					"raw"   : "[{{#loops 10}}\n\t{{ bracketOpen }}{{#each ../schema.properties.postmanRestCreate}}\n\t\t\"{{ toCamelCase name }}\": {{{ postmanQuotes . }}}{{{ mocker (object property=. type='postman' hasUuidSeed=false) }}}{{{ postmanQuotes . }}}{{#unless @last}}, {{/unless}}{{/each}}\n\t}{{#unless @last}}, {{/unless}}{{/loops}}\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "\{{URL}}/{{ toKebabCase schema.boundedContextName }}/{{ toKebabCase schema.moduleNames }}",
					"host": [
						"\{{URL}}"
					],
					"path": [
						"{{ toKebabCase schema.boundedContextName }}",
						"{{ toKebabCase schema.moduleNames }}"
					]
				}
			},
			"response": []
        },
        {
			"name": "REST - {{ toKebabCase schema.boundedContextName }}/{{ toKebabCase schema.moduleNames }}/paginate",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}{{#if schema.properties.hasI18n}},
                    {
                        "key": "Content-Language",
                        "name": "Content-Language",
                        "type": "text",
                        "value": "es"
                    }
                    {{/if}}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"query\":\n\t{\n\t\t\"offset\": 0,\n\t\t\"limit\": 10\n\t}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "\{{URL}}/{{ toKebabCase schema.boundedContextName }}/{{ toKebabCase schema.moduleNames }}/paginate",
					"host": [
						"\{{URL}}"
					],
					"path": [
						"{{ toKebabCase schema.boundedContextName }}",
                        "{{ toKebabCase schema.moduleNames }}",
                        "paginate"
					]
				}
			},
			"response": []
        },
        {
			"name": "REST - {{ toKebabCase schema.boundedContextName }}/{{ toKebabCase schema.moduleNames }}/find",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}{{#if schema.properties.hasI18n}},
                    {
                        "key": "Content-Language",
                        "name": "Content-Language",
                        "type": "text",
                        "value": "es"
                    }
                    {{/if}}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"query\":\n\t{\n\t\t\"where\":\n\t\t{ \n\t\t\t\"id\": \"{{{ mocker (object type='uuid') }}}\"\n\t\t}\n\t}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "\{{URL}}/{{ toKebabCase schema.boundedContextName }}/{{ toKebabCase schema.moduleNames }}/find",
					"host": [
						"\{{URL}}"
					],
					"path": [
						"{{ toKebabCase schema.boundedContextName }}",
						"{{ toKebabCase schema.moduleNames }}",
                        "find"
					]
				}
			},
			"response": []
        },
        {
			"name": "REST - {{ toKebabCase schema.boundedContextName }}/{{ toKebabCase schema.moduleName }}/find",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}{{#if schema.properties.hasI18n}},
                    {
                        "key": "Content-Language",
                        "name": "Content-Language",
                        "type": "text",
                        "value": "es"
                    }
                    {{/if}}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"query\":\n\t{\n\t\t\"where\":\n\t\t{\n\t\t\t\"id\": \"{{{ mocker (object type='uuid') }}}\"\n\t\t}\n\t}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "\{{URL}}/{{ toKebabCase schema.boundedContextName }}/{{ toKebabCase schema.moduleName }}/find",
					"host": [
						"\{{URL}}"
					],
					"path": [
						"{{ toKebabCase schema.boundedContextName }}",
						"{{ toKebabCase schema.moduleName }}",
                        "find"
					]
				}
			},
			"response": []
        },
        {
			"name": "REST - {{ toKebabCase schema.boundedContextName }}/{{ toKebabCase schema.moduleName }}/{id}",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}{{#if schema.properties.hasI18n}},
                    {
                        "key": "Content-Language",
                        "name": "Content-Language",
                        "type": "text",
                        "value": "es"
                    }
                    {{/if}}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "\{{URL}}/{{ toKebabCase schema.boundedContextName }}/{{ toKebabCase schema.moduleName }}/{{{ mocker (object type='uuid') }}}",
					"host": [
						"\{{URL}}"
					],
					"path": [
						"{{ toKebabCase schema.boundedContextName }}",
						"{{ toKebabCase schema.moduleName }}",
						"{{{ mocker (object type='uuid') }}}"
					]
				}
			},
			"response": []
        },
        {{#if schema.properties.hasI18n}}
        {
			"name": "REST - {{ toKebabCase schema.boundedContextName }}/{{ toKebabCase schema.moduleName }}-i18n/{id}",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
                    {
						"key": "Content-Language",
						"name": "Content-Language",
						"type": "text",
						"value": "es"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "\{{URL}}/{{ toKebabCase schema.boundedContextName }}/{{ toKebabCase schema.moduleName }}-i18n/{{{ mocker (object type='uuid') }}}",
					"host": [
						"\{{URL}}"
					],
					"path": [
						"{{ toKebabCase schema.boundedContextName }}",
						"{{ toKebabCase schema.moduleName }}",
						"{{{ mocker (object type='uuid') }}}"
					]
				}
			},
			"response": []
        },
        {{/if}}
        {
			"name": "REST - {{ toKebabCase schema.boundedContextName }}/{{ toKebabCase schema.moduleName }}",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}{{#if schema.properties.hasI18n}},
                    {
                        "key": "Content-Language",
                        "name": "Content-Language",
                        "type": "text",
                        "value": "es"
                    }
                    {{/if}}
				],
				"body": {
					"mode": "raw",
					"raw"   : "{{ bracketOpen }}{{#each schema.properties.postmanRestUpdate}}\n\t\"{{ toCamelCase name }}\": {{{ postmanQuotes . }}}{{{ mocker (object property=. type='postman') }}}{{{ postmanQuotes . }}}{{#unless @last}}, {{/unless}}{{/each}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "\{{URL}}/{{ toKebabCase schema.boundedContextName }}/{{ toKebabCase schema.moduleName }}",
					"host": [
						"\{{URL}}"
					],
					"path": [
						"{{ toKebabCase schema.boundedContextName }}",
						"{{ toKebabCase schema.moduleName }}"
					]
				}
			},
			"response": []
        },
        {
			"name": "REST - {{ toKebabCase schema.boundedContextName }}/{{ toKebabCase schema.moduleName }}/{id}",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}{{#if schema.properties.hasI18n}},
                    {
                        "key": "Content-Language",
                        "name": "Content-Language",
                        "type": "text",
                        "value": "es"
                    }
                    {{/if}}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "\{{URL}}/{{ toKebabCase schema.boundedContextName }}/{{ toKebabCase schema.moduleName }}/{{{ mocker (object type='uuid') }}}",
					"host": [
						"\{{URL}}"
					],
					"path": [
						"{{ toKebabCase schema.boundedContextName }}",
						"{{ toKebabCase schema.moduleName }}",
						"{{{ mocker (object type='uuid') }}}"
					]
				}
			},
			"response": []
		},
        {
			"name": "REST - {{ toKebabCase schema.boundedContextName }}/{{ toKebabCase schema.moduleNames }}",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}{{#if schema.properties.hasI18n}},
                    {
                        "key": "Content-Language",
                        "name": "Content-Language",
                        "type": "text",
                        "value": "es"
                    }
                    {{/if}}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"query\":\n\t{\n\t\t\"where\":\n\t\t{\n\t\t\t\"id\":\n\t\t\t{\n\t\t\t\t\"[substring]\": \"\"\n\t\t\t}\n\t\t}\n\t}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "\{{URL}}/{{ toKebabCase schema.boundedContextName }}/{{ toKebabCase schema.moduleNames }}",
					"host": [
						"\{{URL}}"
					],
					"path": [
						"{{ toKebabCase schema.boundedContextName }}",
						"{{ toKebabCase schema.moduleNames }}"
					]
				}
			},
			"response": []
		}
    ],
    "variable": [
		{
			"id": "{{ uuid }}",
			"key": "URL",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}